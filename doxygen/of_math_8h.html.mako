<%inherit file="base.mako" />
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    ${self.head()}
    <meta http-equiv="X-UA-Compatible" content="IE=9"/>
    <meta name="generator" content="Doxygen 1.8.3.1"/>
    <title>openFrameworks: Class Index</title>
    <link href="tabs.css" rel="stylesheet" type="text/css"/>
    <script type="text/javascript" src="dynsections.js"></script>
    <link href="search/search.css" rel="stylesheet" type="text/css"/>
    <script type="text/javascript" src="search/search.js"></script>
    <script type="text/javascript">
      $(document).ready(function() { searchBox.OnSelectItem(0); });
    </script>
    <link href="doxygen.css" rel="stylesheet" type="text/css" />
  </head>
  <body>
    <div id="content">
      ${self.header()}
      <div id="body-wrap">
      		<div class="page-wide">
	            <div class="page-left-split">
           		    <h1 class="documentation">reference</h1> <ul class="docsadvanced"><li><a href="/documentation">basic</a></li> <li><a  class="active" href="/doxygen/annotated.html">advanced</a></li> </ul>
           		</div>
		        <div class="page-right-narrow">
			        <p>This documentation is automatically generated from the openFrameworks source code using doxygen and refers to the most recent release, version <strong>${bf.config.currentVersion}</strong>.</p>
		        </div>
       		</div>
      		<div class="page-wide">
      		    <div class="doxy-mainmenu">
<!-- Generated by Doxygen 1.8.4 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_84d5b34cee6369a03c8d1f3b970ed216.html">openFrameworks</a></li><li class="navelem"><a class="el" href="dir_6b67c3a1fdba4d6b038dad8a0f05d92f.html">math</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ofMath.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="of_point_8h_source.html">ofPoint.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="of_constants_8h_source.html">ofConstants.h</a>&quot;</code><br/>
</div>
<p><a href="of_math_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a0e50654e98b730299945741b53853421"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a0e50654e98b730299945741b53853421">ofNextPow2</a> (int <a class="el" href="of_matrix4x4_8cpp.html#a8d3c3518d793541417a4845125da1ae1">a</a>)</td></tr>
<tr class="memdesc:a0e50654e98b730299945741b53853421"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the next larger power of 2.  <a href="#a0e50654e98b730299945741b53853421">More...</a><br/></td></tr>
<tr class="separator:a0e50654e98b730299945741b53853421"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0df526ceae8b4f80f169d6d3918540e5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a0df526ceae8b4f80f169d6d3918540e5">ofSeedRandom</a> ()</td></tr>
<tr class="memdesc:a0df526ceae8b4f80f169d6d3918540e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Randomly seeds the random number generator.  <a href="#a0df526ceae8b4f80f169d6d3918540e5">More...</a><br/></td></tr>
<tr class="separator:a0df526ceae8b4f80f169d6d3918540e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54f5c56b8cfc33bbc059aeb147d4bbef"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a54f5c56b8cfc33bbc059aeb147d4bbef">ofSeedRandom</a> (int val)</td></tr>
<tr class="memdesc:a54f5c56b8cfc33bbc059aeb147d4bbef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Seeds the random number generator with a value for consistent randomness.  <a href="#a54f5c56b8cfc33bbc059aeb147d4bbef">More...</a><br/></td></tr>
<tr class="separator:a54f5c56b8cfc33bbc059aeb147d4bbef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae93bfe2a2080f0e2a03df835e72c7521"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#ae93bfe2a2080f0e2a03df835e72c7521">ofRandom</a> (float max)</td></tr>
<tr class="memdesc:ae93bfe2a2080f0e2a03df835e72c7521"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a random floating point number between 0 and max.  <a href="#ae93bfe2a2080f0e2a03df835e72c7521">More...</a><br/></td></tr>
<tr class="separator:ae93bfe2a2080f0e2a03df835e72c7521"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f89011a70f981bab979cc82b9713f85"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a4f89011a70f981bab979cc82b9713f85">ofRandom</a> (float val0, float val1)</td></tr>
<tr class="memdesc:a4f89011a70f981bab979cc82b9713f85"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns a random number between two values.  <a href="#a4f89011a70f981bab979cc82b9713f85">More...</a><br/></td></tr>
<tr class="separator:a4f89011a70f981bab979cc82b9713f85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea7a1685224b49b4949899d4b283af51"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#aea7a1685224b49b4949899d4b283af51">ofRandomf</a> ()</td></tr>
<tr class="separator:aea7a1685224b49b4949899d4b283af51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab701838d1aa2e4ad8f04bad401c21a0a"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#ab701838d1aa2e4ad8f04bad401c21a0a">ofRandomuf</a> ()</td></tr>
<tr class="memdesc:ab701838d1aa2e4ad8f04bad401c21a0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">a random floating point number between 0 and 1.  <a href="#ab701838d1aa2e4ad8f04bad401c21a0a">More...</a><br/></td></tr>
<tr class="separator:ab701838d1aa2e4ad8f04bad401c21a0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeda138c0500e2d10b0763e4c1ac1cc53"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#aeda138c0500e2d10b0763e4c1ac1cc53">ofNormalize</a> (float value, float min, float max)</td></tr>
<tr class="memdesc:aeda138c0500e2d10b0763e4c1ac1cc53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Given a value and a range, remap the value to be within 0 and 1.  <a href="#aeda138c0500e2d10b0763e4c1ac1cc53">More...</a><br/></td></tr>
<tr class="separator:aeda138c0500e2d10b0763e4c1ac1cc53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed7db854914e53ba53ded1f9a4ff47da"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#aed7db854914e53ba53ded1f9a4ff47da">ofMap</a> (float value, float inputMin, float inputMax, float outputMin, float outputMax, bool clamp=false)</td></tr>
<tr class="memdesc:aed7db854914e53ba53ded1f9a4ff47da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Given a value and an input range, remap the value to be within an output range.  <a href="#aed7db854914e53ba53ded1f9a4ff47da">More...</a><br/></td></tr>
<tr class="separator:aed7db854914e53ba53ded1f9a4ff47da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b2fc21e53bfb8521923300b0d30afdb"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a4b2fc21e53bfb8521923300b0d30afdb">ofClamp</a> (float value, float min, float max)</td></tr>
<tr class="memdesc:a4b2fc21e53bfb8521923300b0d30afdb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamp a value between min and max.  <a href="#a4b2fc21e53bfb8521923300b0d30afdb">More...</a><br/></td></tr>
<tr class="separator:a4b2fc21e53bfb8521923300b0d30afdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a851eb0ea11c2bfe151665de8e3c66561"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a851eb0ea11c2bfe151665de8e3c66561">ofLerp</a> (float start, float stop, float amt)</td></tr>
<tr class="memdesc:a851eb0ea11c2bfe151665de8e3c66561"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linearly interpolate a value be within a range.  <a href="#a851eb0ea11c2bfe151665de8e3c66561">More...</a><br/></td></tr>
<tr class="separator:a851eb0ea11c2bfe151665de8e3c66561"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa866e5d80a66299e18b89bf9f879b3f5"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#aa866e5d80a66299e18b89bf9f879b3f5">ofDist</a> (float x1, float y1, float x2, float y2)</td></tr>
<tr class="memdesc:aa866e5d80a66299e18b89bf9f879b3f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the distance between two points.  <a href="#aa866e5d80a66299e18b89bf9f879b3f5">More...</a><br/></td></tr>
<tr class="separator:aa866e5d80a66299e18b89bf9f879b3f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acca6b68f9a67cbc302866c6b60f55899"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#acca6b68f9a67cbc302866c6b60f55899">ofDistSquared</a> (float x1, float y1, float x2, float y2)</td></tr>
<tr class="memdesc:acca6b68f9a67cbc302866c6b60f55899"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the distance between two points, without taking the square root of the result.  <a href="#acca6b68f9a67cbc302866c6b60f55899">More...</a><br/></td></tr>
<tr class="separator:acca6b68f9a67cbc302866c6b60f55899"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f39494418fc89efee2378ec2ac989f8"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a7f39494418fc89efee2378ec2ac989f8">ofSign</a> (float n)</td></tr>
<tr class="memdesc:a7f39494418fc89efee2378ec2ac989f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the sign of a number.  <a href="#a7f39494418fc89efee2378ec2ac989f8">More...</a><br/></td></tr>
<tr class="separator:a7f39494418fc89efee2378ec2ac989f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa078cdd83eb6d3dd355897e7f15a2f33"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#aa078cdd83eb6d3dd355897e7f15a2f33">ofInRange</a> (float t, float min, float max)</td></tr>
<tr class="memdesc:aa078cdd83eb6d3dd355897e7f15a2f33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if a number is inside of a given range.  <a href="#aa078cdd83eb6d3dd355897e7f15a2f33">More...</a><br/></td></tr>
<tr class="separator:aa078cdd83eb6d3dd355897e7f15a2f33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d02e72641780bca037f6c63f7b6e508"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a7d02e72641780bca037f6c63f7b6e508">ofRadToDeg</a> (float radians)</td></tr>
<tr class="memdesc:a7d02e72641780bca037f6c63f7b6e508"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert radians to degrees.  <a href="#a7d02e72641780bca037f6c63f7b6e508">More...</a><br/></td></tr>
<tr class="separator:a7d02e72641780bca037f6c63f7b6e508"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70a120b33471d10ce0e755ee43c32b25"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a70a120b33471d10ce0e755ee43c32b25">ofDegToRad</a> (float degrees)</td></tr>
<tr class="memdesc:a70a120b33471d10ce0e755ee43c32b25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert degrees to radians.  <a href="#a70a120b33471d10ce0e755ee43c32b25">More...</a><br/></td></tr>
<tr class="separator:a70a120b33471d10ce0e755ee43c32b25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b9d058406f6fc2c2dc378057e789a60"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a3b9d058406f6fc2c2dc378057e789a60">ofLerpDegrees</a> (float currentAngle, float targetAngle, float pct)</td></tr>
<tr class="memdesc:a3b9d058406f6fc2c2dc378057e789a60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linearly interpolate a value between two angles in degrees.  <a href="#a3b9d058406f6fc2c2dc378057e789a60">More...</a><br/></td></tr>
<tr class="separator:a3b9d058406f6fc2c2dc378057e789a60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1f8c65595c036c675cc390c2d90d166"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#ae1f8c65595c036c675cc390c2d90d166">ofLerpRadians</a> (float currentAngle, float targetAngle, float pct)</td></tr>
<tr class="memdesc:ae1f8c65595c036c675cc390c2d90d166"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linearly interpolate a value between two angles in radians.  <a href="#ae1f8c65595c036c675cc390c2d90d166">More...</a><br/></td></tr>
<tr class="separator:ae1f8c65595c036c675cc390c2d90d166"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9187e3d0572b394eb8f341ec88b575f4"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a9187e3d0572b394eb8f341ec88b575f4">ofAngleDifferenceDegrees</a> (float currentAngle, float targetAngle)</td></tr>
<tr class="memdesc:a9187e3d0572b394eb8f341ec88b575f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the difference between two angles in degrees.  <a href="#a9187e3d0572b394eb8f341ec88b575f4">More...</a><br/></td></tr>
<tr class="separator:a9187e3d0572b394eb8f341ec88b575f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10ed9288cb91336033e7c3eeb159f604"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a10ed9288cb91336033e7c3eeb159f604">ofAngleDifferenceRadians</a> (float currentAngle, float targetAngle)</td></tr>
<tr class="memdesc:a10ed9288cb91336033e7c3eeb159f604"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the difference between two angles in radians.  <a href="#a10ed9288cb91336033e7c3eeb159f604">More...</a><br/></td></tr>
<tr class="separator:a10ed9288cb91336033e7c3eeb159f604"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11cf9bc2b855744f58aa7f2f174eb657"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a11cf9bc2b855744f58aa7f2f174eb657">ofWrap</a> (float value, float from, float to)</td></tr>
<tr class="memdesc:a11cf9bc2b855744f58aa7f2f174eb657"><td class="mdescLeft">&#160;</td><td class="mdescRight">Find a value within a given range, wrapping the value if it overflows.  <a href="#a11cf9bc2b855744f58aa7f2f174eb657">More...</a><br/></td></tr>
<tr class="separator:a11cf9bc2b855744f58aa7f2f174eb657"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34be4c1bb0fedb406eb7dcfd7cf743bc"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a34be4c1bb0fedb406eb7dcfd7cf743bc">ofWrapRadians</a> (float angle, float from=-<a class="el" href="of_constants_8h.html#a598a3330b3c21701223ee0ca14316eca">PI</a>, float to=+<a class="el" href="of_constants_8h.html#a598a3330b3c21701223ee0ca14316eca">PI</a>)</td></tr>
<tr class="separator:a34be4c1bb0fedb406eb7dcfd7cf743bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33e3f2421ab89bc4ee00a0f67d09aa0a"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a33e3f2421ab89bc4ee00a0f67d09aa0a">ofWrapDegrees</a> (float angle, float from=-180, float to=+180)</td></tr>
<tr class="separator:a33e3f2421ab89bc4ee00a0f67d09aa0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a9226ad2046591bf4aa5d2707ebba2f"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a9a9226ad2046591bf4aa5d2707ebba2f">ofRandomWidth</a> ()</td></tr>
<tr class="separator:a9a9226ad2046591bf4aa5d2707ebba2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0e9ce331e6b98373845f16e778548df"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#ac0e9ce331e6b98373845f16e778548df">ofRandomHeight</a> ()</td></tr>
<tr class="separator:ac0e9ce331e6b98373845f16e778548df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94cb5392d5d0a5ed7908c5fd31ae97d2"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a94cb5392d5d0a5ed7908c5fd31ae97d2">ofNoise</a> (float x)</td></tr>
<tr class="memdesc:a94cb5392d5d0a5ed7908c5fd31ae97d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates a one dimensional Perlin noise value between 0.0...1.0.  <a href="#a94cb5392d5d0a5ed7908c5fd31ae97d2">More...</a><br/></td></tr>
<tr class="separator:a94cb5392d5d0a5ed7908c5fd31ae97d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21b4f1d491303ad4a36d892a2ab4f4be"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a21b4f1d491303ad4a36d892a2ab4f4be">ofNoise</a> (float x, float y)</td></tr>
<tr class="memdesc:a21b4f1d491303ad4a36d892a2ab4f4be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates a two dimensional Perlin noise value between 0.0...1.0.  <a href="#a21b4f1d491303ad4a36d892a2ab4f4be">More...</a><br/></td></tr>
<tr class="separator:a21b4f1d491303ad4a36d892a2ab4f4be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e780ac96e9ca3fc409b2e17b85c9e61"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a9e780ac96e9ca3fc409b2e17b85c9e61">ofNoise</a> (float x, float y, float z)</td></tr>
<tr class="memdesc:a9e780ac96e9ca3fc409b2e17b85c9e61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates a three dimensional Perlin noise value between 0.0...1.0.  <a href="#a9e780ac96e9ca3fc409b2e17b85c9e61">More...</a><br/></td></tr>
<tr class="separator:a9e780ac96e9ca3fc409b2e17b85c9e61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac27bf743a5ae09ec44fbf95969f031ab"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#ac27bf743a5ae09ec44fbf95969f031ab">ofNoise</a> (float x, float y, float z, float w)</td></tr>
<tr class="memdesc:ac27bf743a5ae09ec44fbf95969f031ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates a four dimensional Perlin noise value between 0.0...1.0.  <a href="#ac27bf743a5ae09ec44fbf95969f031ab">More...</a><br/></td></tr>
<tr class="separator:ac27bf743a5ae09ec44fbf95969f031ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16196baebc57f663f27f9aff40c518e3"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a16196baebc57f663f27f9aff40c518e3">ofSignedNoise</a> (float x)</td></tr>
<tr class="memdesc:a16196baebc57f663f27f9aff40c518e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates a one dimensional Perlin noise value between -1.0...1.0.  <a href="#a16196baebc57f663f27f9aff40c518e3">More...</a><br/></td></tr>
<tr class="separator:a16196baebc57f663f27f9aff40c518e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7850c901fdde189ca52645017fa55c4b"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a7850c901fdde189ca52645017fa55c4b">ofSignedNoise</a> (float x, float y)</td></tr>
<tr class="memdesc:a7850c901fdde189ca52645017fa55c4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates a two dimensional Perlin noise value between -1.0...1.0.  <a href="#a7850c901fdde189ca52645017fa55c4b">More...</a><br/></td></tr>
<tr class="separator:a7850c901fdde189ca52645017fa55c4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95e125e2fb6e73c3fcda31baebef2c69"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a95e125e2fb6e73c3fcda31baebef2c69">ofSignedNoise</a> (float x, float y, float z)</td></tr>
<tr class="memdesc:a95e125e2fb6e73c3fcda31baebef2c69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates a three dimensional Perlin noise value between -1.0...1.0.  <a href="#a95e125e2fb6e73c3fcda31baebef2c69">More...</a><br/></td></tr>
<tr class="separator:a95e125e2fb6e73c3fcda31baebef2c69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29682c90a71c5931f30e855b35014b4c"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a29682c90a71c5931f30e855b35014b4c">ofSignedNoise</a> (float x, float y, float z, float w)</td></tr>
<tr class="memdesc:a29682c90a71c5931f30e855b35014b4c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates a four dimensional Perlin noise value between -1.0...1.0.  <a href="#a29682c90a71c5931f30e855b35014b4c">More...</a><br/></td></tr>
<tr class="separator:a29682c90a71c5931f30e855b35014b4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade445c844b18f82fdf311268eec5400c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#ade445c844b18f82fdf311268eec5400c">ofInsidePoly</a> (float x, float y, const vector&lt; <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> &gt; &amp;poly)</td></tr>
<tr class="memdesc:ade445c844b18f82fdf311268eec5400c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine if an (x,y) coordinate is within the polygon defined by a vector of ofPoints.  <a href="#ade445c844b18f82fdf311268eec5400c">More...</a><br/></td></tr>
<tr class="separator:ade445c844b18f82fdf311268eec5400c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafee3b18d9dccdfa85aa1b925a346029"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#aafee3b18d9dccdfa85aa1b925a346029">ofInsidePoly</a> (const <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> &amp;p, const vector&lt; <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> &gt; &amp;poly)</td></tr>
<tr class="memdesc:aafee3b18d9dccdfa85aa1b925a346029"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine if an ofPoint is within the polygon defined by a vector of ofPoints.  <a href="#aafee3b18d9dccdfa85aa1b925a346029">More...</a><br/></td></tr>
<tr class="separator:aafee3b18d9dccdfa85aa1b925a346029"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dc7132fb85eb90d7cf3194ad6c054cc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a6dc7132fb85eb90d7cf3194ad6c054cc">ofLineSegmentIntersection</a> (<a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> line1Start, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> line1End, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> line2Start, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> line2End, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> &amp;intersection)</td></tr>
<tr class="memdesc:a6dc7132fb85eb90d7cf3194ad6c054cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine the intersection between two lines.  <a href="#a6dc7132fb85eb90d7cf3194ad6c054cc">More...</a><br/></td></tr>
<tr class="separator:a6dc7132fb85eb90d7cf3194ad6c054cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae41684be82f712ce9afe52366c57f9a0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#ae41684be82f712ce9afe52366c57f9a0">ofBezierPoint</a> (<a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#a8d3c3518d793541417a4845125da1ae1">a</a>, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#ab2d05693952610f937e5acb3c4a8fa1b">b</a>, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#aafc737ea9ef91f59cf9acd287fb8d085">c</a>, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#a2530554172d8629149ec56816eeaa947">d</a>, float t)</td></tr>
<tr class="memdesc:ae41684be82f712ce9afe52366c57f9a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Given the four points that determine a bezier curve, return an interpolated point on the curve.  <a href="#ae41684be82f712ce9afe52366c57f9a0">More...</a><br/></td></tr>
<tr class="separator:ae41684be82f712ce9afe52366c57f9a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb059119ae6349bbbde274ac2b1b5e26"><td class="memItemLeft" align="right" valign="top"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#abb059119ae6349bbbde274ac2b1b5e26">ofCurvePoint</a> (<a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#a8d3c3518d793541417a4845125da1ae1">a</a>, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#ab2d05693952610f937e5acb3c4a8fa1b">b</a>, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#aafc737ea9ef91f59cf9acd287fb8d085">c</a>, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#a2530554172d8629149ec56816eeaa947">d</a>, float t)</td></tr>
<tr class="memdesc:abb059119ae6349bbbde274ac2b1b5e26"><td class="mdescLeft">&#160;</td><td class="mdescRight">Given the four points that determine a Catmull Rom curve, return an interpolated point on the curve.  <a href="#abb059119ae6349bbbde274ac2b1b5e26">More...</a><br/></td></tr>
<tr class="separator:abb059119ae6349bbbde274ac2b1b5e26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7ef7086c0cb61b4883a15873dd2b87e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#af7ef7086c0cb61b4883a15873dd2b87e">ofBezierTangent</a> (<a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#a8d3c3518d793541417a4845125da1ae1">a</a>, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#ab2d05693952610f937e5acb3c4a8fa1b">b</a>, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#aafc737ea9ef91f59cf9acd287fb8d085">c</a>, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#a2530554172d8629149ec56816eeaa947">d</a>, float t)</td></tr>
<tr class="separator:af7ef7086c0cb61b4883a15873dd2b87e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae12c7ac240f0bd70fb212c16a9022f0d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="of_math_8h.html#ae12c7ac240f0bd70fb212c16a9022f0d">ofCurveTangent</a> (<a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#a8d3c3518d793541417a4845125da1ae1">a</a>, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#ab2d05693952610f937e5acb3c4a8fa1b">b</a>, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#aafc737ea9ef91f59cf9acd287fb8d085">c</a>, <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> <a class="el" href="of_matrix4x4_8cpp.html#a2530554172d8629149ec56816eeaa947">d</a>, float t)</td></tr>
<tr class="memdesc:ae12c7ac240f0bd70fb212c16a9022f0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a tangent point for an offset along a Catmull Rom curve.  <a href="#ae12c7ac240f0bd70fb212c16a9022f0d">More...</a><br/></td></tr>
<tr class="separator:ae12c7ac240f0bd70fb212c16a9022f0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03ae1b6363bc5768851000d35538066e"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a03ae1b6363bc5768851000d35538066e"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a03ae1b6363bc5768851000d35538066e">ofInterpolateCosine</a> (Type y1, Type y2, float pct)</td></tr>
<tr class="separator:a03ae1b6363bc5768851000d35538066e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4fa59b0c4c66e53f4e017923121ea0d"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ae4fa59b0c4c66e53f4e017923121ea0d"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="of_math_8h.html#ae4fa59b0c4c66e53f4e017923121ea0d">ofInterpolateCubic</a> (Type y0, Type y1, Type y2, Type y3, float pct)</td></tr>
<tr class="separator:ae4fa59b0c4c66e53f4e017923121ea0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91742a5ecd1dd798be415bbc493c22bf"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a91742a5ecd1dd798be415bbc493c22bf"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a91742a5ecd1dd798be415bbc493c22bf">ofInterpolateCatmullRom</a> (Type y0, Type y1, Type y2, Type y3, float pct)</td></tr>
<tr class="separator:a91742a5ecd1dd798be415bbc493c22bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5983155f864e82d3f5dfb57d95ff8f27"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a5983155f864e82d3f5dfb57d95ff8f27"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a5983155f864e82d3f5dfb57d95ff8f27">ofInterpolateHermite</a> (Type y0, Type y1, Type y2, Type y3, float pct)</td></tr>
<tr class="separator:a5983155f864e82d3f5dfb57d95ff8f27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fff1be1275f2e15198628c0cd15bb4f"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a2fff1be1275f2e15198628c0cd15bb4f"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="of_math_8h.html#a2fff1be1275f2e15198628c0cd15bb4f">ofInterpolateHermite</a> (Type y0, Type y1, Type y2, Type y3, float pct, float tension, float bias)</td></tr>
<tr class="separator:a2fff1be1275f2e15198628c0cd15bb4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a9187e3d0572b394eb8f341ec88b575f4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofAngleDifferenceDegrees </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>currentAngle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>targetAngle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates the difference between two angles in degrees. </p>
<p>This will calculate the actual difference, taking into account multiple revolutions. For example: </p>
<pre class="fragment">ofAngleDifferenceDegrees(0,90); // returns 90;
ofAngleDifferenceDegrees(0,450); // also returns 90;
</pre><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">currentAngle</td><td>The current angle in degrees. </td></tr>
    <tr><td class="paramname">targetAngle</td><td>the angle to be compared to in degrees. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The difference between two angles in degrees. </dd></dl>

</div>
</div>
<a class="anchor" id="a10ed9288cb91336033e7c3eeb159f604"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofAngleDifferenceRadians </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>currentAngle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>targetAngle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates the difference between two angles in radians. </p>
<p>This will calculate the actual difference, taking into account multiple revolutions. For example: </p>
<pre class="fragment">ofAngleDifferenceRadians(0,PI); // returns -PI;
ofAngleDifferenceRadians(0,3*PI); // also returns -PI;
</pre><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">currentAngle</td><td>The current angle in radians. </td></tr>
    <tr><td class="paramname">targetAngle</td><td>the angle to be compared to in radians. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The difference between two angles in radians. </dd></dl>

</div>
</div>
<a class="anchor" id="ae41684be82f712ce9afe52366c57f9a0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> ofBezierPoint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Given the four points that determine a bezier curve, return an interpolated point on the curve. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>The beginning point of the curve. </td></tr>
    <tr><td class="paramname">b</td><td>The first control point. </td></tr>
    <tr><td class="paramname">c</td><td>The second control point. </td></tr>
    <tr><td class="paramname">d</td><td>The end point of the curve. </td></tr>
    <tr><td class="paramname">t</td><td>an offset along the curve, normalized between 0 and 1. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A ofPoint on the curve. </dd></dl>

</div>
</div>
<a class="anchor" id="af7ef7086c0cb61b4883a15873dd2b87e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> ofBezierTangent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Given the four points that determine a bezier curve and an offset along the curve, return an tangent vector to a point on the curve. Currently this is not a normalized point, and will need to be normalized. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>The beginning point of the curve. </td></tr>
    <tr><td class="paramname">b</td><td>The first control point. </td></tr>
    <tr><td class="paramname">c</td><td>The second control point. </td></tr>
    <tr><td class="paramname">d</td><td>The end point of the curve. </td></tr>
    <tr><td class="paramname">t</td><td>an offset along the curve, normalized between 0 and 1. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A ofPoint on the curve. </dd></dl>

</div>
</div>
<a class="anchor" id="a4b2fc21e53bfb8521923300b0d30afdb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofClamp </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clamp a value between min and max. </p>
<p>Restricts a value to be within a specified range defined by values min and max. If the value is min &lt;= value &lt;= max, returns value. If the value is greater than max, return max; if the value is less than min, return min. </p>
<pre class="fragment">float val, newval;
val = 10;
newval = ofClamp(val,30,40); // newval = 30
newval = ofClamp(val,0,5); // newval = 5
newval = ofClamp(val,0,20); // newval = 10
</pre><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The number to be clamped. </td></tr>
    <tr><td class="paramname">min</td><td>The floor of the range. </td></tr>
    <tr><td class="paramname">max</td><td>The ceiling of the range. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A float between min and max. </dd></dl>

</div>
</div>
<a class="anchor" id="abb059119ae6349bbbde274ac2b1b5e26"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> ofCurvePoint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Given the four points that determine a Catmull Rom curve, return an interpolated point on the curve. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>The first control point. </td></tr>
    <tr><td class="paramname">b</td><td>The beginning point of the curve. </td></tr>
    <tr><td class="paramname">c</td><td>The end point of the curve. </td></tr>
    <tr><td class="paramname">d</td><td>The second control point. </td></tr>
    <tr><td class="paramname">t</td><td>an offset along the curve, normalized between 0 and 1. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A ofPoint on the curve. </dd></dl>

</div>
</div>
<a class="anchor" id="ae12c7ac240f0bd70fb212c16a9022f0d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> ofCurveTangent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>t</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a tangent point for an offset along a Catmull Rom curve. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>The first control point. </td></tr>
    <tr><td class="paramname">b</td><td>The beginning point of the curve. </td></tr>
    <tr><td class="paramname">c</td><td>The end point of the curve. </td></tr>
    <tr><td class="paramname">d</td><td>The second control point. </td></tr>
    <tr><td class="paramname">t</td><td>an offset along the curve, normalized between 0 and 1. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A ofPoint on the curve. </dd></dl>

</div>
</div>
<a class="anchor" id="a70a120b33471d10ce0e755ee43c32b25"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofDegToRad </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>degrees</em>)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert degrees to radians. </p>
<p>Example: </p>
<pre class="fragment">float result = ofDegToRad(90); // result will be PI/2
</pre><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">degrees</td><td>An angle in degrees. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the angle in radians. </dd></dl>

</div>
</div>
<a class="anchor" id="aa866e5d80a66299e18b89bf9f879b3f5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofDist </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates the distance between two points. </p>
<p>Uses <a href="http://en.wikipedia.org/wiki/Pythagorean_theorem">http://en.wikipedia.org/wiki/Pythagorean_theorem</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x1</td><td>X position of first point. </td></tr>
    <tr><td class="paramname">y1</td><td>Y position of first point. </td></tr>
    <tr><td class="paramname">x2</td><td>X position of second point. </td></tr>
    <tr><td class="paramname">y2</td><td>Y position of second point. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>float Distance between points. </dd></dl>

</div>
</div>
<a class="anchor" id="acca6b68f9a67cbc302866c6b60f55899"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofDistSquared </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates the distance between two points, without taking the square root of the result. </p>
<p>Same as ofMath::ofDist() but doesn't take the sqrt() of the result, which is a faster operation if you need to calculate and compare multiple distances.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x1</td><td>X position of first point. </td></tr>
    <tr><td class="paramname">y1</td><td>Y position of first point. </td></tr>
    <tr><td class="paramname">x2</td><td>X position of second point. </td></tr>
    <tr><td class="paramname">y2</td><td>Y position of second point. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>distance^2 between two points. </dd></dl>

</div>
</div>
<a class="anchor" id="aa078cdd83eb6d3dd355897e7f15a2f33"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ofInRange </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determines if a number is inside of a given range. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">t</td><td>The value to test. </td></tr>
    <tr><td class="paramname">min</td><td>The floor of the range. </td></tr>
    <tr><td class="paramname">max</td><td>The ceiling of the range. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true iff the number t is the range of [min - max]. </dd></dl>

</div>
</div>
<a class="anchor" id="ade445c844b18f82fdf311268eec5400c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ofInsidePoly </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>poly</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if an (x,y) coordinate is within the polygon defined by a vector of ofPoints. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>The x dimension of the coordinate. </td></tr>
    <tr><td class="paramname">y</td><td>The y dimension of the coordinate. </td></tr>
    <tr><td class="paramname">poly</td><td>a vector of ofPoints defining a polygon. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the point defined by the coordinates is enclosed, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="aafee3b18d9dccdfa85aa1b925a346029"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ofInsidePoly </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> &amp;&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; <a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>poly</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if an ofPoint is within the polygon defined by a vector of ofPoints. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>A point to check. </td></tr>
    <tr><td class="paramname">poly</td><td>A vector of ofPoints defining a polygon. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the ofPoint is enclosed, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a91742a5ecd1dd798be415bbc493c22bf"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Type ofInterpolateCatmullRom </td>
          <td>(</td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>pct</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a03ae1b6363bc5768851000d35538066e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Type ofInterpolateCosine </td>
          <td>(</td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>pct</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ae4fa59b0c4c66e53f4e017923121ea0d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Type ofInterpolateCubic </td>
          <td>(</td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>pct</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a5983155f864e82d3f5dfb57d95ff8f27"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Type ofInterpolateHermite </td>
          <td>(</td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>pct</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a2fff1be1275f2e15198628c0cd15bb4f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Type ofInterpolateHermite </td>
          <td>(</td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>y3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>pct</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>tension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a851eb0ea11c2bfe151665de8e3c66561"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofLerp </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>stop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>amt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Linearly interpolate a value be within a range. </p>
<p>Calculates a number between two numbers (start,stop) at a specific increment (amt). If we want the new number to be between start and stop numbers, amt needs to be a number between 0 and 1. <a class="el" href="of_math_8cpp.html#a851eb0ea11c2bfe151665de8e3c66561" title="Linearly interpolate a value be within a range. ">ofLerp()</a> does not clamp the values. </p>
<pre class="fragment">float init = 1;
float end = 2;
float increment = 0.2;
float result = ofLerp(init, end, increment); // result = 1.2
// Values outside 0...1 work as well.
increment = 2;
result = ofLerp(init, end, increment); // result = 3
</pre><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>The floor of the range. </td></tr>
    <tr><td class="paramname">stop</td><td>The ceiling of the range. </td></tr>
    <tr><td class="paramname">amt</td><td>The position within the range to return. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A float between start and stop. </dd></dl>

</div>
</div>
<a class="anchor" id="a3b9d058406f6fc2c2dc378057e789a60"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofLerpDegrees </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>currentAngle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>targetAngle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>pct</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Linearly interpolate a value between two angles in degrees. </p>
<p>Calculates a number between two numbers (start, stop) at a specific increment (amt). This does constrain the result into a single rotation, but does not clamp the values</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">currentAngle</td><td>The floor of the range in degrees. </td></tr>
    <tr><td class="paramname">targetAngle</td><td>The ceiling of the range in degrees. </td></tr>
    <tr><td class="paramname">pct</td><td>An amount between 0.0..1.0 within the range to return. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An angle in degrees between currentAngle and targetAngle. </dd></dl>

</div>
</div>
<a class="anchor" id="ae1f8c65595c036c675cc390c2d90d166"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofLerpRadians </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>currentAngle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>targetAngle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>pct</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Linearly interpolate a value between two angles in radians. </p>
<p>Calculates a number between two numbers (start, stop) at a specific increment (amt). This does constrain the result into a single rotation, but does not clamp the values</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">currentAngle</td><td>The floor of the range in radians. </td></tr>
    <tr><td class="paramname">targetAngle</td><td>The ceiling of the range in radians. </td></tr>
    <tr><td class="paramname">pct</td><td>An amount between 0.0..1.0 within the range to return. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An angle in radians between currentAngle and targetAngle. </dd></dl>

</div>
</div>
<a class="anchor" id="a6dc7132fb85eb90d7cf3194ad6c054cc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ofLineSegmentIntersection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>line1Start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>line1End</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>line2Start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a>&#160;</td>
          <td class="paramname"><em>line2End</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="of_point_8h.html#a0e9c5f9596918593de99ee1bd275476f">ofPoint</a> &amp;&#160;</td>
          <td class="paramname"><em>intersection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine the intersection between two lines. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">line1Start</td><td>Starting point for first line. </td></tr>
    <tr><td class="paramname">line1End</td><td>End point for first line. </td></tr>
    <tr><td class="paramname">line2Start</td><td>Starting point for second line. </td></tr>
    <tr><td class="paramname">line2End</td><td>End point for second line. </td></tr>
    <tr><td class="paramname">intersection</td><td>ofPoint reference in which to store the computed intersection point. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the lines intersect. </dd></dl>

</div>
</div>
<a class="anchor" id="aed7db854914e53ba53ded1f9a4ff47da"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofMap </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>inputMin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>inputMax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>outputMin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>outputMax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>clamp</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Given a value and an input range, remap the value to be within an output range. </p>
<p>ofMap remaps the value passed in "value", calculating it's linear distance between inputMin and inputMax, and remapping it based on that percentage to outputMin and outputMax. You can choose to clamp the results, which will constrain the results between outputMin and outputMax. Results are not clamped by default.</p>
<p>Example: </p>
<pre class="fragment">float x, newx;
x = 5;
// 0 &lt; x &lt; 10
newx = ofMap(x, 0, 10, 21, 22); // newx = 21.5 a value between 21 and 22
</pre><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The number to be mapped. </td></tr>
    <tr><td class="paramname">inputMin</td><td>The floor of the input range. </td></tr>
    <tr><td class="paramname">inputMax</td><td>The ceiling of the input range. </td></tr>
    <tr><td class="paramname">outputMin</td><td>The floor of the output range. </td></tr>
    <tr><td class="paramname">outputMax</td><td>The ceiling of the output range. </td></tr>
    <tr><td class="paramname">clamp</td><td>true iff the value should be clamped between outputMin and outputMax. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a float, mapped between outputMin and outputMax. </dd></dl>

</div>
</div>
<a class="anchor" id="a0e50654e98b730299945741b53853421"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ofNextPow2 </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a</em>)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates the next larger power of 2. </p>
<p>If the input is already a power of 2, it will return itself. Example:</p>
<p>ofNextPow2(50); // returns 64 ofNextPow2(64); // returns 64 ofNextPow(401)); // returns 512</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value.</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>value^2. </dd></dl>

</div>
</div>
<a class="anchor" id="a94cb5392d5d0a5ed7908c5fd31ae97d2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofNoise </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates a one dimensional Perlin noise value between 0.0...1.0. </p>

</div>
</div>
<a class="anchor" id="a21b4f1d491303ad4a36d892a2ab4f4be"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofNoise </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates a two dimensional Perlin noise value between 0.0...1.0. </p>

</div>
</div>
<a class="anchor" id="a9e780ac96e9ca3fc409b2e17b85c9e61"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofNoise </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates a three dimensional Perlin noise value between 0.0...1.0. </p>

</div>
</div>
<a class="anchor" id="ac27bf743a5ae09ec44fbf95969f031ab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofNoise </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>w</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates a four dimensional Perlin noise value between 0.0...1.0. </p>

</div>
</div>
<a class="anchor" id="aeda138c0500e2d10b0763e4c1ac1cc53"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofNormalize </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Given a value and a range, remap the value to be within 0 and 1. </p>
<p>Often, you'll need to work with percentages or other methods that expect a value between 0 and 1. This function will take a minimum and maximum, and then finds where within that range a value sits. If the value is outside the range, it will be mapped to 0 or 1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The number to be normalized. </td></tr>
    <tr><td class="paramname">min</td><td>The floor of the range. </td></tr>
    <tr><td class="paramname">max</td><td>The ceiling of the range. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A float between 0 and 1. </dd></dl>

</div>
</div>
<a class="anchor" id="a7d02e72641780bca037f6c63f7b6e508"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofRadToDeg </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>radians</em>)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert radians to degrees. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">radians</td><td>An angle in radians. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the angle in degrees. </dd></dl>

</div>
</div>
<a class="anchor" id="ae93bfe2a2080f0e2a03df835e72c7521"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofRandom </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>max</em>)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a random floating point number between 0 and max. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">float</td><td>The maximum value of the random number. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4f89011a70f981bab979cc82b9713f85"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofRandom </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>val0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>val1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>returns a random number between two values. </p>
<p>Example:</p>
<p>// Return a random floating point number between -30 and 20. ofRandom(-30, 20);</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">val0</td><td>the minimum value of the random number. </td></tr>
    <tr><td class="paramname">val1</td><td>The maximum value of the random number. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A random floating point number between val0 and val1. </dd></dl>

</div>
</div>
<a class="anchor" id="aea7a1685224b49b4949899d4b283af51"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofRandomf </td>
          <td>(</td>
          <td class="paramname">)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A random floating point number between -1 and 1. </dd></dl>

</div>
</div>
<a class="anchor" id="ac0e9ce331e6b98373845f16e778548df"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofRandomHeight </td>
          <td>(</td>
          <td class="paramname">)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a random number between 0 and the height of the screen. </dd></dl>

</div>
</div>
<a class="anchor" id="ab701838d1aa2e4ad8f04bad401c21a0a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofRandomuf </td>
          <td>(</td>
          <td class="paramname">)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>a random floating point number between 0 and 1. </p>

</div>
</div>
<a class="anchor" id="a9a9226ad2046591bf4aa5d2707ebba2f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofRandomWidth </td>
          <td>(</td>
          <td class="paramname">)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a random number between 0 and the width of the screen. </dd></dl>

</div>
</div>
<a class="anchor" id="a0df526ceae8b4f80f169d6d3918540e5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ofSeedRandom </td>
          <td>(</td>
          <td class="paramname">)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Randomly seeds the random number generator. </p>
<p>This seeds the random number generator with an acceptably random value, generated from clock time and the PID. </p>

</div>
</div>
<a class="anchor" id="a54f5c56b8cfc33bbc059aeb147d4bbef"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ofSeedRandom </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>val</em>)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Seeds the random number generator with a value for consistent randomness. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">int</td><td>The value with which to seed the generator. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7f39494418fc89efee2378ec2ac989f8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ofSign </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>n</em>)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the sign of a number. </p>
<dl class="section return"><dt>Returns</dt><dd>int -1 if n is negative, 1 if n is positive, and 0 is n == 0; </dd></dl>

</div>
</div>
<a class="anchor" id="a16196baebc57f663f27f9aff40c518e3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofSignedNoise </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>)</td><td></td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates a one dimensional Perlin noise value between -1.0...1.0. </p>

</div>
</div>
<a class="anchor" id="a7850c901fdde189ca52645017fa55c4b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofSignedNoise </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates a two dimensional Perlin noise value between -1.0...1.0. </p>

</div>
</div>
<a class="anchor" id="a95e125e2fb6e73c3fcda31baebef2c69"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofSignedNoise </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates a three dimensional Perlin noise value between -1.0...1.0. </p>

</div>
</div>
<a class="anchor" id="a29682c90a71c5931f30e855b35014b4c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofSignedNoise </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>w</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates a four dimensional Perlin noise value between -1.0...1.0. </p>

</div>
</div>
<a class="anchor" id="a11cf9bc2b855744f58aa7f2f174eb657"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofWrap </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>from</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>to</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find a value within a given range, wrapping the value if it overflows. </p>
<p>If a value is between from and to, return that value. If a value is NOT within that range, wrap it.</p>
<p>For example: </p>
<pre class="fragment">ofWrap(5,0,10); // returns 5;
ofWrap(15,0,10); // also returns 5;
ofWrap(-5,0,10); // also returns 5;
</pre><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>The value to map. </td></tr>
    <tr><td class="paramname">from</td><td>The floor of the range. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>to The ceiling of the range. </dd></dl>

</div>
</div>
<a class="anchor" id="a33e3f2421ab89bc4ee00a0f67d09aa0a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofWrapDegrees </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>from</em> = <code>-180</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>to</em> = <code>+180</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a34be4c1bb0fedb406eb7dcfd7cf743bc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float ofWrapRadians </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>from</em> = <code>-<a class="el" href="of_constants_8h.html#a598a3330b3c21701223ee0ca14316eca">PI</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>to</em> = <code>+<a class="el" href="of_constants_8h.html#a598a3330b3c21701223ee0ca14316eca">PI</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->

            </div>
      </div>
      <div id="footer">
        ${self.footer()}
      </div> <!-- End Footer -->
    </div> <!-- End Content -->
  </body>
</html>
<%def name="header()">
  <%include file="header.mako" args="active='documentation'" />
</%def>
